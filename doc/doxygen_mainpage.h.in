/*! \mainpage @PACKAGE@ Description 
 *  \author Kai
 * 	\version @VERSION@
 *
 *
 * 	\section main About
 *
 * 	<b>rta -- ray tracing, again.</b>
 *
 * 	This is yet another ray tracing system, this time with a stronger focus on the actual ray travsersal core.
 * 	Based on previous approaches we try to find a compromise between code duplication and template crazyness.
 * 	This is described greater detail under \ref basic_types, where we explain some design decisions 
 * 		and provide a few guidelines on how you should write your plugins.
 *
 *  The purpose of rta is to provide a testing platform to evaluate different approaches to acceleration structures and ray traversal schemes.
 *  Therefore we provide a common and very slim interface which newly written rta-plugins have to follow.
 *  Beside of making it possible to call such ray tracing components from our framework to allow for easy benchmarking this should
 *  	also make it straightforward to integrate these components into applications requiring such a ray tracing component.
 *
 *
 *
 *
 *  \section license License & Terms of use.
 *
 *  (c) Kai.
 *
 *  May be used under the terms of the GNU GPL v3 or later.
 *
 *  \attention I do not hold exclusive copyright on all plugins held in this repository.
 *  The student projects are not necessarily distributed under the terms of the GPL.
 *
 *  To be more clear, the basic framework as found in the directories
 *  \li librta,
 *  \li rta, and
 *  \li sphs
 *
 *  is distributed under the terms mentioned, as well as the following plugins:
 *  \li bbvh
 *  \li sbvh
 *  \li bbvh-olc
 *  \li sbvh-olc
 *  \li wrapper-for-librctest
 *
 *  The student projects are
 *  \li siallier
 *
 *  \note It would be nice if you would stall any redistribution until this project has established a fixed website :)
 *
 *
 *
 *
 * 	\section howto_run How to run rta
 *	Run it by invoking
 * 	\code
 * 	$ ./rta/rta [options] plugin -- [plugin-options]
 * 	\endcode
 * 	or, when installed
 * 	\code
 * 	$ rta [options] plugin -- [plugin-options]
 * 	\endcode
 *
 * 	To get help on rta, or a specific plugin, see, respectively,
 * 	\code
 * 	$ rta --help
 * 	$ rta plugin -- --help
 * 	\endcode
 *
 * 	Note the double dash; if this seems foreign to you you should brush up your cmdline syntax.
 *
 *
 * 	\subsection sphs Analysis of Sphere Measurements
 *  We provide an analysis tool for sphere measurements in \c sphs (for <em>sph</em>ere <em>s</em>eries.
 *  It reads the timings stored in the ply file generated by rta, see
 *  \code
 *  $ sphs/sphs --help
 *  \endcode
 *  as well as the document <tt>messungen/messungen.pdf</tt>.
 *
 *
 *  \subsection debug Debugging
 *  The compilation with debug flags is done as usual:
 *	\code
 *  $ ./configure CXXFLAGS="-O0 -ggdb3"
 *	\endcode
 *  When debugging rta it does, however, becomes apparent that we're using libtool which wraps local (non-installed) versions of our binaries for library consistency. This may bite you when you try to debug rta. Therefore we provide the correct debugger call here:
 *  \code
 *  $ libtool execute [c]gdb rta/rta
 *  \endcode
 *	This does, of course, not concearn you when you run an installed version of rta.
 *
 *
 *
 *  \section howto_plugin How to make your own plugin
 *  \subsection howto_plugin_a Inside the source tree
 *  \code
 *  export p='myplugin'
 *  $ cd rta
 *  $ mkdir $p
 *  $ cp brute-force/bruteforce.cpp $p/$p.cpp
 *  $ cp bruteforce/Makefile.am $p/
 *  $ vim ...
 *  -> substitute plugin name in $p/Makefile.am
 *  -> add plugin directory to ./Makefile.am
 *  -> add plugin makefile to ./configure.ac
 *  \endcode
 *
 *  \subsection howto_plugin_b Outside the source tree
 *  See the exampleplugin in the root directory.
 *  When run like
 *  \code
 *  $ rta myplugin
 *  \endcode
 *  the directory <tt>$libdir/rta/</tt> is searched for <tt>myplugin.so</tt>, if it is not found the given filename itself it tried for library opening (in this case, you'll need the .so extension).
 *  
 *
 *
 *
 *  \section bnl Bugs & Limitations
 *
 *  \subsection limits Limitations
 * 	\li We currently support scenes in wavefront's obj format and ``sphere geometry'' in stanford's ply format, only.
 * 	\li GPU ray tracing is not integrated very well into our framework. 
 * 		What's there is mostly implemented in the opencl modules \c bbvh-ocl and \c sbvh-ocl.
 * 		Further application will surely bring about the necessary adaptions.
 *
 * 	\subsection bugs Bugs
 * 	\li Currently, the positional tracing is broken. This is due to bitrot as it is implemented in a separate, seldomly used, branch.
 *
 *
 *
 *
 *  \section deps Dependencies and build instructions
 *
 * 	We require gcc >= 4.6 because of some C++11 extensions.
 *
 * 	Furthermore we depend on a few of our own libs:
 *  \li lib3dmath (because of libobjloader, this dependency will be dropped some time)
 *  \li libmcm
 *  \li libobjloader
 *  \li libplyloader
 *  \li liblumocl (if you use the opencl tracers)
 *
 *  Other dependencies are
 *  \li ligpng++
 *
 */

