2014-05-11	Kai

* Introduced the interface
	cpu_raytracer : public basic_raytracer
which takes a small part of the old basic_raytracer to make it an interface to
encapsulate the general rta-tracing algorithm, without relying on cpu tracing
data. This data is moved to cpu_raytracer. All tracers and examples have beed
adapted to derive from the cpu interface, if appropriate.

* Rudimentary integration of cuda ray tracing is now integrated into rta. All
of it lives in the namespace
	rta::cuda.
We provide the following interfaces
	a) gpu_ray_generator,
	b) raygen_with_buffer,
	c) gpu_ray_bouncer, and
	d) gpu_raytracer.
a) A simple representation of gpu ray data. Might be generalized later.
b) An adaptor to existing ray generators which uploads the generated rays to
the gpu.
c) The same as cpu_ray_bouncer. It holds the intersection data which is
proviced to the tracer.
d) A similar interface to cpu_raytracer. It captures and converts ray
generators and bouncers via the interface established in basic_raytracer.

Note the first sketch of different layouts possible for ray-, triangle- and
box-data. The current interface might be extended to allow for fundamental
tests on data layout.



2014-04-22	Kai

* All tracers must implement the following virtual function.  
	virtual bool supports_max_t() = 0 
This way we can check if a tracer can be used for a given purpose (e.g.
shadow rays). Expect some more of these to appear in the future. Note that
constexpr and static_assert will not work as we usually handle objects of
unknown type created in a plugin.
supports_max_t is meant to signify that a tracer honors a predefined maximal
ray length and does not report intersections farther away.
  
* ray_generator now has
	ray_max_t
an image of per-ray maximal ray lengths, accessible via
	max_t(). 
Tracers should honor this information and ray_generators should take care for
its proper initialization.
We introduced
	virtual void dont_forget_to_initialize_max_t() = 0
to find ray generators which do not initialize max_t during generate_rays.
This precaution will be dropped after a while.

* cam_ray_generator_shirley initializes all max_t to FLT_MAX and
bbvh_direct_is_tracer and bbvh_child_is_tracer support this extension.



2014-04-22	Kai

* material.cpp (texture::sample): Fix border case (y==h, x==w).
